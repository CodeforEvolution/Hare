Index: src/Hare/Hare/CMakeLists.txt
===================================================================
--- src/Hare/Hare/CMakeLists.txt	(revision 0)
+++ src/Hare/Hare/CMakeLists.txt	(revision 0)
@@ -0,0 +1,18 @@
+
+add_executable(Hare Application.cpp
+					AppView.cpp
+					AppWindow.cpp
+					CheckMark.cpp
+					EditorView.cpp
+					EncoderListView.cpp
+					FileNamePatternView.cpp
+					Settings.cpp
+					StatusBarFilter.cpp)
+
+target_link_libraries(Hare "santa" "string" "aeencoder" "audioinfo" "tag" "be" "game" "media" "tracker")
+
+set_property(TARGET Hare PROPERTY RUNTIME_OUTPUT_DIRECTORY ${HARE_BUILD_DIR})
+
+haiku_add_resource_def(Hare Hare.rdef)
+
+haiku_auto_mimetype(Hare)
Index: src/Hare/M3UCreator/CMakeLists.txt
===================================================================
--- src/Hare/M3UCreator/CMakeLists.txt	(revision 0)
+++ src/Hare/M3UCreator/CMakeLists.txt	(revision 0)
@@ -0,0 +1,6 @@
+
+add_library(M3U-Creator MODULE M3UCreator.cpp)
+
+target_link_libraries(M3U-Creator "aeencoder" "tag" "be")
+
+set_property(TARGET M3U-Creator PROPERTY LIBRARY_OUTPUT_DIRECTORY ${HARE_BUILD_ADDONS_DIR})
Index: src/Hare/AEEncoder/CMakeLists.txt
===================================================================
--- src/Hare/AEEncoder/CMakeLists.txt	(revision 0)
+++ src/Hare/AEEncoder/CMakeLists.txt	(revision 0)
@@ -0,0 +1,4 @@
+
+add_definitions(-D__FSS_BUILD)
+
+add_library(aeencoder STATIC AEEncoder.cpp)
Index: src/Hare/BeEncoder/CMakeLists.txt
===================================================================
--- src/Hare/BeEncoder/CMakeLists.txt	(revision 0)
+++ src/Hare/BeEncoder/CMakeLists.txt	(revision 0)
@@ -0,0 +1,6 @@
+
+add_library(BeEncoder MODULE BeEncoder.cpp MediaMenuItem.cpp)
+
+target_link_libraries(BeEncoder "audioinfo" "aeencoder" "string" "tag" "be" "media")
+
+set_property(TARGET BeEncoder PROPERTY LIBRARY_OUTPUT_DIRECTORY ${HARE_BUILD_ADDONS_DIR})
Index: src/Hare/MP3GoGo/CMakeLists.txt
===================================================================
--- src/Hare/MP3GoGo/CMakeLists.txt	(revision 0)
+++ src/Hare/MP3GoGo/CMakeLists.txt	(revision 0)
@@ -0,0 +1,6 @@
+
+add_library(MP3-GoGo MODULE GoGoEncoder.cpp)
+
+target_link_libraries(MP3-GoGo "audioinfo" "aeencoder" "tag" "be")
+
+set_property(TARGET MP3-GoGo PROPERTY LIBRARY_OUTPUT_DIRECTORY ${HARE_BUILD_ADDONS_DIR})
Index: src/Hare/OGGEncoder/CMakeLists.txt
===================================================================
--- src/Hare/OGGEncoder/CMakeLists.txt	(revision 0)
+++ src/Hare/OGGEncoder/CMakeLists.txt	(revision 0)
@@ -0,0 +1,6 @@
+
+add_library(OGG-Encoder MODULE OggEncoder.cpp)
+
+target_link_libraries(OGG-Encoder "audioinfo" "aeencoder" "tag" "be")
+
+set_property(TARGET OGG-Encoder PROPERTY LIBRARY_OUTPUT_DIRECTORY ${HARE_BUILD_ADDONS_DIR})
Index: src/Hare/CMakeLists.txt
===================================================================
--- src/Hare/CMakeLists.txt	(revision 0)
+++ src/Hare/CMakeLists.txt	(revision 0)
@@ -0,0 +1,15 @@
+include_directories(${CMAKE_CURRENT_SOURCE_DIR})
+
+add_subdirectory(AEEncoder)
+
+add_subdirectory(BeEncoder)
+
+add_subdirectory(Hare)
+
+add_subdirectory(M3UCreator)
+
+add_subdirectory(MP3GoGo)
+
+add_subdirectory(MP3Lame)
+
+add_subdirectory(OGGEncoder)
Index: src/Hare/MP3Lame/CMakeLists.txt
===================================================================
--- src/Hare/MP3Lame/CMakeLists.txt	(revision 0)
+++ src/Hare/MP3Lame/CMakeLists.txt	(revision 0)
@@ -0,0 +1,6 @@
+
+add_library(MP3-Lame MODULE MP3Lame.cpp)
+
+target_link_libraries(MP3-Lame "audioinfo" "aeencoder" "tag" "be")
+
+set_property(TARGET MP3-Lame PROPERTY LIBRARY_OUTPUT_DIRECTORY ${HARE_BUILD_ADDONS_DIR})
Index: src/Matcher/CMakeLists.txt
===================================================================
--- src/Matcher/CMakeLists.txt	(revision 0)
+++ src/Matcher/CMakeLists.txt	(revision 0)
@@ -0,0 +1,2 @@
+
+add_library(matcher STATIC NameValueMatcher.cpp)
Index: src/Santa/CMakeLists.txt
===================================================================
--- src/Santa/CMakeLists.txt	(revision 0)
+++ src/Santa/CMakeLists.txt	(revision 0)
@@ -0,0 +1,14 @@
+
+add_library(santa STATIC
+				BetterScrollView.cpp
+				CLVColumn.cpp
+				CLVColumnLabelView.cpp
+				CLVEasyItem.cpp
+				CLVRefListItem.cpp
+				CLVListItem.cpp
+				ColumnListView.cpp
+				Cursors.cpp
+				NewStrings.cpp
+				PrefilledBitmap.cpp
+				ScrollViewCorner.cpp
+				UserResizeSplitView.cpp)
Index: src/String/CMakeLists.txt
===================================================================
--- src/String/CMakeLists.txt	(revision 0)
+++ src/String/CMakeLists.txt	(revision 0)
@@ -0,0 +1,2 @@
+
+add_library(string STATIC String.cpp)
Index: src/AudioInfo/CMakeLists.txt
===================================================================
--- src/AudioInfo/CMakeLists.txt	(revision 0)
+++ src/AudioInfo/CMakeLists.txt	(revision 0)
@@ -0,0 +1,10 @@
+
+add_library(audioinfo STATIC
+				AudioAttribute.cpp
+				AudioAttributes.cpp
+				AudioInfo.cpp
+				GenreList.cpp
+				ID3Tag.cpp
+				ID3Tags.cpp)
+
+target_link_libraries(audioinfo "string")
Index: src/CMakeLists.txt
===================================================================
--- src/CMakeLists.txt	(revision 0)
+++ src/CMakeLists.txt	(revision 0)
@@ -0,0 +1,11 @@
+include_directories(${CMAKE_CURRENT_SOURCE_DIR})
+
+add_subdirectory(AudioInfo)
+
+add_subdirectory(Matcher)
+
+add_subdirectory(Santa)
+
+add_subdirectory(String)
+
+add_subdirectory(Hare)
Index: CMakeModules/UseHaiku.cmake
===================================================================
--- CMakeModules/UseHaiku.cmake	(revision 0)
+++ CMakeModules/UseHaiku.cmake	(revision 0)
@@ -0,0 +1,98 @@
+#
+# - Haiku module for CMake
+#
+
+
+#
+# Compile a resource definition file(.rdef) to a resource file(.rsrc).
+# Add resources from the .rsrc file to the target.
+#
+function(HAIKU_ADD_RESOURCE_DEF TARGET FILENAME)
+
+	get_filename_component(rdefpath ${FILENAME} ABSOLUTE)
+	get_filename_component(rdeffile ${FILENAME} NAME_WE)
+
+	set(rsrcfile "${rdeffile}.rsrc")
+	set(rsrcpath "${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${rsrcfile}.dir/${rsrcfile}")
+
+	add_custom_command(
+		OUTPUT ${rsrcpath}
+		COMMAND "rc" "-o" "${rsrcpath}" "${rdefpath}"
+		DEPENDS ${rdefpath}
+		COMMENT "Compiling resource ${rsrcpath}")
+
+	add_custom_target(${rsrcfile} DEPENDS ${rsrcpath})
+
+	set_source_files_properties(${rsrcfile} PROPERTIES GENERATED TRUE)
+
+	haiku_add_resource_internal(${TARGET} ${rsrcpath})
+
+endfunction(HAIKU_ADD_RESOURCE_DEF)
+
+
+
+#
+# Add resources from a .rsrc file to the target.
+#
+function(HAIKU_ADD_RESOURCE TARGET FILENAME)
+
+	haiku_add_resource_internal(${TARGET} "${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME}")
+
+endfunction(HAIKU_ADD_RESOURCE)
+
+
+
+#
+# Add resources from a .rsrc file to the target.
+# This is the internal version meant to be called from this module only.
+#
+function(HAIKU_ADD_RESOURCE_INTERNAL TARGET RSRC_PATH)
+
+	get_target_property(TARGET_PATH ${TARGET} LOCATION)
+
+	if(NOT TARGET_PATH)
+		message(SEND_ERROR "Unable to determine target location for HAIKU_ADD_RESOURCE")
+	endif(NOT TARGET_PATH)
+
+	add_custom_command(
+		TARGET ${TARGET}
+		POST_BUILD
+		COMMAND "xres" "-o" "${TARGET_PATH}" "${RSRC_PATH}"
+		COMMENT "Merging resource ${RSRC_PATH}")
+
+	# FIXME: Need to fix the dependency so TARGET is rebuilt properly
+	# and doesn't need this hack
+	add_custom_target(
+		${TARGET}_check_resources
+		COMMAND "/bin/sh" "-c" \"if [ \"${RSRC_PATH}\" -nt \"${TARGET_PATH}\" ]\\;then rm -f \"${TARGET_PATH}\"\\;fi\")
+
+	get_filename_component(rsrcfile ${RSRC_PATH} NAME)
+
+	# Need this so that rsrcfile target is built before _check_resources
+	add_dependencies(${TARGET}_check_resources ${rsrcfile})
+
+	add_dependencies(${TARGET} ${TARGET}_check_resources)
+
+endfunction(HAIKU_ADD_RESOURCE_INTERNAL)
+
+
+#
+# Run "mimeset" command to automatically set mimetype attributes using sniffer rules.
+#
+function(HAIKU_AUTO_MIMETYPE TARGET)
+
+	get_target_property(TARGET_LOC ${TARGET} LOCATION)
+
+	if(NOT TARGET_LOC)
+		message(SEND_ERROR "Unable to determine target location for HAIKU_AUTO_MIMETYPE")
+	endif(NOT TARGET_LOC)
+
+	add_custom_command(
+		TARGET ${TARGET}
+		POST_BUILD
+		COMMAND "mimeset" "-f" "${TARGET_LOC}"
+		COMMENT "Setting mimetype ${TARGET_LOC}")
+
+endfunction(HAIKU_AUTO_MIMETYPE)
+
+
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 0)
+++ CMakeLists.txt	(revision 0)
@@ -0,0 +1,21 @@
+cmake_minimum_required(VERSION 2.6)
+
+project(HARE)
+
+#Override the default module naming scheme
+#so that we get <encoder> instead of lib<encoder>.so
+set(CMAKE_SHARED_MODULE_PREFIX "")
+set(CMAKE_SHARED_MODULE_SUFFIX "")
+
+set(CMAKE_MODULE_PATH "${HARE_SOURCE_DIR}/CMakeModules")
+
+set(HARE_BUILD_DIR ${HARE_BINARY_DIR}/build)
+
+set(HARE_BUILD_ADDONS_DIR ${HARE_BINARY_DIR}/build/add-ons)
+
+include(UseHaiku)
+
+include_directories("${HARE_SOURCE_DIR}/include/taglib")
+
+add_subdirectory(src)
+
